generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  name       String
  image      String
  role       Role         @default(USER)
  Enrollment Enrollment[]
  Review     Review[]
}

enum Role {
  ADMIN
  Instructor
  USER
}

model Course {
  id               String             @id @default(uuid())
  name             String
  image            String
  description      String
  price            Int
  level            level
  categoryId       String
  Category         Category           @relation(fields: [categoryId], references: [id])
  lessons          Lesson[]
  Enrollment       Enrollment[]
  Review           Review[]
  LearningPoint    LearningPoint[]
  CarrerOpertunity CarrerOpertunity[]
  UsedSoftware     UsedSoftware[]
  JobPosition      JobPosition[]
}

enum level {
  Beginner
  Intermediate
  Advanced
}

model Category {
  id     String   @id @default(uuid())
  name   String
  course Course[]
}

model LearningPoint {
  id       String @id @default(uuid())
  name     String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model UsedSoftware {
  id       String @id @default(uuid())
  name     String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model JobPosition {
  id       String @id @default(uuid())
  name     String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model CarrerOpertunity {
  id          String @id @default(uuid())
  description String
  course      Course @relation(fields: [courseId], references: [id])
  courseId    String
}

model Lesson {
  id       String    @id @default(uuid())
  number   Int
  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  courseId String
  Lecture  Lecture[]

  @@unique([number, courseId])
}

model Lecture {
  id       String @id @default(uuid())
  number   Int
  name     String
  url      String
  length   Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  @@unique([number, lessonId])
}

// model Instructor {
//   id       String @id @default(uuid())
//   course   Course @relation(fields: [courseId], references: [id])
//   courseId String
//   user     User   @relation(fields: [userId], references: [id])
//   userId   String
// }

model Enrollment {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String
  amount   Int
  trxId    String
  method   String
  verified Boolean @default(false)

  @@unique([userId, courseId])
}

model Review {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  comment  String
  rating   Int
}